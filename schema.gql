# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Answer {
  id: String!
  text: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type GameStatus {
  win: Float!
  lost: Float!
  status: Float!
  level: Float!
  location: Location!
}

input GameStatusInput {
  level: Float!
  location: LocationInput!
}

input GameStatusType {
  level: Float
  status: Float
  location: UpdateLocationInput
  request: Request
}

type Location {
  type: String!
  coordinates: [Float!]!
}

input LocationInput {
  type: String!
  coordinates: [Float!]!
}

type Mutation {
  addQuestion(data: NewQuestionInput!): Question!
  updateQuestion(data: UpdateQuestionInput!): Question!
  removeQuestion(id: String!): Question!
  addProfile(data: NewProfileInput!): Profile!
  updateProfile(data: UpdateProfileInput!): Profile!
  removeProfile(id: String!): Profile!
  updateAvatar: Profile!
}

input NewProfileInput {
  personal: PersonalInput!
  gameStatus: GameStatusInput!
  privacy: PrivacyInput!
}

input NewQuestionInput {
  question: String!
  answers: [String!]!
  correctAnswer: String!
  diff_level: Float!
  category: String
}

type Personal {
  firstName: String!
  lastName: String!
  avatar: String!
  username: String!
  email: String!
  phone: String!
}

input PersonalInput {
  firstName: String!
  lastName: String!
  username: String!
  email: String!
}

type Points {
  points: Float!
  redeemedPoints: Float!
  recievedPoints: RecievePoints!
  sentPoints: SendPoints!
}

type Privacy {
  password: String!
  resetPasswordToken: String!
  loginFailedAttempts: Float!
  roles: [String!]!
}

input PrivacyInput {
  password: String!
}

type Profile {
  _id: ID!
  personal: Personal!
  privacy: Privacy!
  points: Points!
  gameStatus: GameStatus!
}

type Query {
  question(id: String!): Question!
  profiles: [Profile!]!
  profile(id: String!): Profile!
}

type Question {
  _id: ID!
  question: String!
  answers: [Answer!]!
  correctAnswerId: String!
  diff_level: Float!
  category: String!
  createdAt: Float!
  updatedAt: Float!
  createdBy: String!
}

type RecievePoints {
  id: String!
  sender: String!
  amount: Float!
  timestamp: DateTime!
}

input Request {
  status: String
  opponent: String
  created_at: Float
  updated_at: Float
}

type SendPoints {
  id: String!
  recipient: String!
  amount: Float!
  timestamp: DateTime!
}

type Subscription {
  recipeAdded: Profile!
}

input UpdateLocationInput {
  type: String!
  coordinates: [Float!]!
}

input UpdateProfileInput {
  _id: String!
  firstName: String
  gameStatus: GameStatusType
  lastName: String
  username: String
  password: String
  email: String
}

input UpdateQuestionInput {
  question: String!
  answers: [String!]!
  correctAnswer: String!
  diff_level: Float!
  category: String
  id: String!
}
